#!/usr/bin/env python3
"""
Test suite cho Facebook Ads Dashboard v√† Chatbot
Test c√°c API endpoints v√† ch·ª©c nƒÉng ch√≠nh
"""

import unittest
import json
import os
import tempfile
import requests
from unittest.mock import patch, MagicMock
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Import app v√† c√°c modules
from app import app, OpenAIChatbot, load_ads_data
from facebook_ads_extractor import FacebookAdsExtractor

class TestFacebookAdsDashboard(unittest.TestCase):
    """Test class cho Facebook Ads Dashboard"""
    
    def setUp(self):
        """Thi·∫øt l·∫≠p test environment"""
        app.config['TESTING'] = True
        app.config['WTF_CSRF_ENABLED'] = False
        self.client = app.test_client()
        self.app_context = app.app_context()
        self.app_context.push()
        
        # T·∫°o d·ªØ li·ªáu test
        self.test_ads_data = {
            'extraction_date': '2024-01-01T00:00:00',
            'campaigns': [
                {
                    'id': 'test_campaign_1',
                    'name': 'Test Campaign 1',
                    'status': 'ACTIVE',
                    'objective': 'REACH',
                    'impressions': 1000,
                    'clicks': 50,
                    'spend': 100.50
                }
            ],
            'message': 'Test data'
        }
    
    def tearDown(self):
        """D·ªçn d·∫πp sau test"""
        self.app_context.pop()
    
    def test_health_check(self):
        """Test health check endpoint"""
        response = self.client.get('/api/health')
        self.assertEqual(response.status_code, 200)
        
        data = json.loads(response.data)
        self.assertIn('status', data)
        self.assertIn('timestamp', data)
        self.assertIn('openai_configured', data)
        self.assertEqual(data['status'], 'healthy')
    
    def test_index_page(self):
        """Test trang ch·ªß"""
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Facebook Ads Dashboard', response.data)
    
    def test_ads_data_endpoint(self):
        """Test API endpoint ƒë·ªÉ l·∫•y d·ªØ li·ªáu qu·∫£ng c√°o"""
        # Mock load_ads_data function
        with patch('app.load_ads_data', return_value=self.test_ads_data):
            response = self.client.get('/api/ads-data')
            self.assertEqual(response.status_code, 200)
            
            data = json.loads(response.data)
            self.assertIn('campaigns', data)
            self.assertEqual(len(data['campaigns']), 1)
            self.assertEqual(data['campaigns'][0]['name'], 'Test Campaign 1')
    
    def test_ask_question_endpoint_success(self):
        """Test API endpoint ƒë·ªÉ h·ªèi c√¢u h·ªèi - th√†nh c√¥ng"""
        # Mock OpenAI response
        mock_openai_response = {
            'choices': [{'message': {'content': 'ƒê√¢y l√† c√¢u tr·∫£ l·ªùi test'}}]
        }
        
        with patch('requests.post') as mock_post:
            mock_post.return_value.json.return_value = mock_openai_response
            mock_post.return_value.raise_for_status.return_value = None
            
            # Mock load_ads_data
            with patch('app.load_ads_data', return_value=self.test_ads_data):
                response = self.client.post('/api/ask', 
                                         json={'question': 'Test question'})
                
                self.assertEqual(response.status_code, 200)
                data = json.loads(response.data)
                self.assertIn('question', data)
                self.assertIn('answer', data)
                self.assertEqual(data['question'], 'Test question')
                self.assertEqual(data['answer'], 'ƒê√¢y l√† c√¢u tr·∫£ l·ªùi test')
    
    def test_ask_question_endpoint_empty_question(self):
        """Test API endpoint v·ªõi c√¢u h·ªèi r·ªóng"""
        response = self.client.post('/api/ask', json={'question': ''})
        self.assertEqual(response.status_code, 400)
        
        data = json.loads(response.data)
        self.assertIn('error', data)
    
    def test_ask_question_endpoint_no_question(self):
        """Test API endpoint kh√¥ng c√≥ c√¢u h·ªèi"""
        response = self.client.post('/api/ask', json={})
        self.assertEqual(response.status_code, 400)
        
        data = json.loads(response.data)
        self.assertIn('error', data)

class TestOpenAIChatbot(unittest.TestCase):
    """Test class cho OpenAI Chatbot"""
    
    def setUp(self):
        """Thi·∫øt l·∫≠p test environment"""
        self.chatbot = OpenAIChatbot()
        self.test_ads_data = {'campaigns': [{'name': 'Test Campaign'}]}
    
    def test_chatbot_initialization(self):
        """Test kh·ªüi t·∫°o chatbot"""
        self.assertIsNotNone(self.chatbot)
        # Ki·ªÉm tra xem API key c√≥ ƒë∆∞·ª£c load kh√¥ng
        # (c√≥ th·ªÉ l√† None n·∫øu kh√¥ng c√≥ trong .env)
    
    @patch('requests.post')
    def test_ask_question_success(self, mock_post):
        """Test h·ªèi c√¢u h·ªèi th√†nh c√¥ng"""
        # Mock successful response
        mock_response = MagicMock()
        mock_response.json.return_value = {
            'choices': [{'message': {'content': 'Test answer'}}]
        }
        mock_response.raise_for_status.return_value = None
        mock_post.return_value = mock_response
        
        # Mock API key
        with patch.dict(os.environ, {'OPENAI_API_KEY': 'test_key'}):
            chatbot = OpenAIChatbot()
            answer = chatbot.ask_question('Test question', self.test_ads_data)
            
            self.assertEqual(answer, 'Test answer')
            mock_post.assert_called_once()
    
    @patch('requests.post')
    def test_ask_question_api_error(self, mock_post):
        """Test l·ªói API"""
        mock_post.side_effect = Exception('API Error')
        
        with patch.dict(os.environ, {'OPENAI_API_KEY': 'test_key'}):
            chatbot = OpenAIChatbot()
            answer = chatbot.ask_question('Test question', self.test_ads_data)
            
            self.assertIn('Xin l·ªói, c√≥ l·ªói x·∫£y ra', answer)

class TestFacebookAdsExtractor(unittest.TestCase):
    """Test class cho Facebook Ads Extractor"""
    
    def setUp(self):
        """Thi·∫øt l·∫≠p test environment"""
        # Mock environment variables
        self.env_patcher = patch.dict(os.environ, {
            'FACEBOOK_ACCESS_TOKEN': 'test_token',
            'FACEBOOK_ACCOUNT_IDS': 'test_account_1,test_account_2'
        })
        self.env_patcher.start()
    
    def tearDown(self):
        """D·ªçn d·∫πp sau test"""
        self.env_patcher.stop()
    
    def test_extractor_initialization(self):
        """Test kh·ªüi t·∫°o extractor"""
        try:
            extractor = FacebookAdsExtractor()
            self.assertIsNotNone(extractor)
            self.assertEqual(extractor.access_token, 'test_token')
            self.assertEqual(extractor.account_ids, ['test_account_1', 'test_account_2'])
        except ValueError as e:
            # N·∫øu kh√¥ng c√≥ .env file, test n√†y s·∫Ω fail
            self.skipTest(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o extractor: {e}")
    
    @patch('requests.get')
    def test_test_connection_success(self, mock_get):
        """Test k·∫øt n·ªëi th√†nh c√¥ng"""
        mock_response = MagicMock()
        mock_response.json.return_value = {'data': [{'id': 'test_account'}]}
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
        
        try:
            extractor = FacebookAdsExtractor()
            result = extractor.test_connection()
            self.assertTrue(result)
        except ValueError:
            self.skipTest("Kh√¥ng th·ªÉ kh·ªüi t·∫°o extractor")
    
    @patch('requests.get')
    def test_test_connection_failure(self, mock_get):
        """Test k·∫øt n·ªëi th·∫•t b·∫°i"""
        mock_get.side_effect = requests.exceptions.RequestException('Connection Error')
        
        try:
            extractor = FacebookAdsExtractor()
            result = extractor.test_connection()
            self.assertFalse(result)
        except ValueError:
            self.skipTest("Kh√¥ng th·ªÉ kh·ªüi t·∫°o extractor")

class TestLoadAdsData(unittest.TestCase):
    """Test class cho h√†m load_ads_data"""
    
    def setUp(self):
        """Thi·∫øt l·∫≠p test environment"""
        self.temp_dir = tempfile.mkdtemp()
        self.original_cwd = os.getcwd()
        os.chdir(self.temp_dir)
    
    def tearDown(self):
        """D·ªçn d·∫πp sau test"""
        os.chdir(self.original_cwd)
        import shutil
        shutil.rmtree(self.temp_dir)
    
    def test_load_ads_data_file_not_found(self):
        """Test load d·ªØ li·ªáu khi file kh√¥ng t·ªìn t·∫°i"""
        data = load_ads_data()
        self.assertIn('extraction_date', data)
        self.assertIn('campaigns', data)
        self.assertIn('message', data)
        self.assertEqual(data['message'], 'D·ªØ li·ªáu m·∫´u - ch∆∞a c√≥ d·ªØ li·ªáu th·ª±c')
    
    def test_load_ads_data_with_valid_file(self):
        """Test load d·ªØ li·ªáu t·ª´ file h·ª£p l·ªá"""
        test_data = {
            'extraction_date': '2024-01-01T00:00:00',
            'campaigns': [{'name': 'Test Campaign'}]
        }
        
        with open('ads_data.json', 'w', encoding='utf-8') as f:
            json.dump(test_data, f, ensure_ascii=False, indent=2)
        
        data = load_ads_data()
        self.assertEqual(data['extraction_date'], '2024-01-01T00:00:00')
        self.assertEqual(len(data['campaigns']), 1)
        self.assertEqual(data['campaigns'][0]['name'], 'Test Campaign')

def run_tests():
    """Ch·∫°y t·∫•t c·∫£ tests"""
    print("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y tests cho Facebook Ads Dashboard...")
    print("=" * 60)
    
    # T·∫°o test suite
    test_suite = unittest.TestLoader().loadTestsFromTestCase(TestFacebookAdsDashboard)
    test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestOpenAIChatbot))
    test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestFacebookAdsExtractor))
    test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestLoadAdsData))
    
    # Ch·∫°y tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    print("=" * 60)
    if result.wasSuccessful():
        print("‚úÖ T·∫•t c·∫£ tests ƒë√£ ch·∫°y th√†nh c√¥ng!")
    else:
        print("‚ùå M·ªôt s·ªë tests ƒë√£ th·∫•t b·∫°i!")
        print(f"Tests ch·∫°y: {result.testsRun}")
        print(f"Tests th·∫•t b·∫°i: {len(result.failures)}")
        print(f"Tests b·ªã l·ªói: {len(result.errors)}")
    
    return result.wasSuccessful()

if __name__ == '__main__':
    # Ki·ªÉm tra xem c√≥ file .env kh√¥ng
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file .env")
        print("üìù Vui l√≤ng t·∫°o file .env v·ªõi c√°c c·∫•u h√¨nh c·∫ßn thi·∫øt")
        print("üîç Xem file env_example.txt ƒë·ªÉ bi·∫øt c·∫•u tr√∫c")
    else:
        print("‚úÖ T√¨m th·∫•y file .env")
    
    # Ch·∫°y tests
    success = run_tests()
    
    # Exit code
    exit(0 if success else 1)