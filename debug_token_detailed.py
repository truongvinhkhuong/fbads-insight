#!/usr/bin/env python3
"""
Debug chi ti·∫øt token v√† h∆∞·ªõng d·∫´n l·∫•y User Access Token
"""

import os
import json
import requests
from dotenv import load_dotenv

def debug_token_detailed():
    """Debug chi ti·∫øt token hi·ªán t·∫°i"""
    load_dotenv()
    
    access_token = os.getenv('FACEBOOK_ACCESS_TOKEN')
    base_url = "https://graph.facebook.com/v23.0"
    
    print(f"Access Token: {access_token[:20]}...")
    
    # 1. Ki·ªÉm tra th√¥ng tin token
    print("\n=== TH√îNG TIN TOKEN ===")
    try:
        url = f"{base_url}/me"
        params = {
            'access_token': access_token,
            'fields': 'id,name,category,link'
        }
        response = requests.get(url, params=params)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Token h·ª£p l·ªá")
            print(f"   - ID: {data.get('id')}")
            print(f"   - T√™n: {data.get('name')}")
            print(f"   - Lo·∫°i: {data.get('category')}")
            print(f"   - Link: {data.get('link', 'N/A')}")
            
            if data.get('category') == 'Brand':
                print("‚ùå ƒê√ÇY L√Ä PAGE ACCESS TOKEN - SAI!")
                print("   ‚Üí C·∫ßn User Access Token ho·∫∑c System User Token")
            else:
                print("‚úÖ C√≥ th·ªÉ l√† User Access Token")
        else:
            print(f"‚ùå Token kh√¥ng h·ª£p l·ªá: {response.status_code}")
            print(f"L·ªói: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return
    
    # 2. Ki·ªÉm tra quy·ªÅn chi ti·∫øt
    print("\n=== QUY·ªÄN CHI TI·∫æT ===")
    try:
        url = f"{base_url}/me/permissions"
        params = {'access_token': access_token}
        response = requests.get(url, params=params)
        
        if response.status_code == 200:
            data = response.json()
            permissions = data.get('data', [])
            
            print("Quy·ªÅn hi·ªán t·∫°i:")
            for perm in permissions:
                status = "‚úÖ" if perm.get('status') == 'granted' else "‚ùå"
                print(f"  {status} {perm.get('permission')}: {perm.get('status')}")
            
            # Ki·ªÉm tra quy·ªÅn quan tr·ªçng
            important_perms = ['ads_read', 'ads_management', 'pages_read_engagement']
            has_important = all(
                any(p.get('permission') == perm and p.get('status') == 'granted' 
                    for p in permissions) 
                for perm in important_perms
            )
            
            if has_important:
                print("\n‚úÖ C√≥ ƒë·ªß quy·ªÅn quan tr·ªçng")
            else:
                print("\n‚ùå Thi·∫øu quy·ªÅn quan tr·ªçng")
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra quy·ªÅn: {response.status_code}")
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra quy·ªÅn: {e}")
    
    # 3. Test Ads API v·ªõi error handling chi ti·∫øt
    print("\n=== TEST ADS API CHI TI·∫æT ===")
    account_id = os.getenv('FACEBOOK_ACCOUNT_IDS', '').split(',')[0].strip()
    
    try:
        # Test l·∫•y ads
        url = f"{base_url}/{account_id}/ads"
        params = {
            'access_token': access_token,
            'fields': 'id,name,status',
            'limit': 1
        }
        response = requests.get(url, params=params)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            ads = data.get('data', [])
            print(f"‚úÖ C√≥ th·ªÉ l·∫•y danh s√°ch ads: {len(ads)} ads")
            
            # Test insights cho ad ƒë·∫ßu ti√™n
            if ads:
                ad_id = ads[0].get('id')
                print(f"\n--- Test insights cho ad: {ad_id} ---")
                
                url = f"{base_url}/{ad_id}/insights"
                params = {
                    'access_token': access_token,
                    'fields': 'impressions,clicks,spend',
                    'date_preset': 'maximum',
                    'level': 'ad'
                }
                response = requests.get(url, params=params)
                
                print(f"Insights Status: {response.status_code}")
                if response.status_code == 200:
                    data = response.json()
                    insights = data.get('data', [])
                    print(f"‚úÖ C√≥ th·ªÉ l·∫•y insights: {len(insights)} records")
                    if insights:
                        print(f"   Sample: {insights[0]}")
                else:
                    print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y insights: {response.text}")
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y ads: {response.text}")
    except Exception as e:
        print(f"‚ùå L·ªói test Ads API: {e}")

def print_solution():
    """In gi·∫£i ph√°p chi ti·∫øt"""
    print("\n" + "="*70)
    print("üîß GI·∫¢I PH√ÅP: L·∫§Y USER ACCESS TOKEN")
    print("="*70)
    
    print("\nüìã V·∫§N ƒê·ªÄ:")
    print("   - Token hi·ªán t·∫°i l√† Page Access Token")
    print("   - Page Token KH√îNG th·ªÉ truy c·∫≠p Ads API")
    print("   - C·∫ßn User Access Token ho·∫∑c System User Token")
    
    print("\nüéØ GI·∫¢I PH√ÅP 1: Facebook Graph API Explorer")
    print("1. V√†o: https://developers.facebook.com/tools/explorer/")
    print("2. Ch·ªçn ·ª©ng d·ª•ng c·ªßa b·∫°n")
    print("3. Click 'Get Token' ‚Üí 'Get User Access Token'")
    print("4. Ch·ªçn c√°c quy·ªÅn:")
    print("   ‚úÖ ads_read")
    print("   ‚úÖ ads_management")
    print("   ‚úÖ pages_read_engagement")
    print("   ‚úÖ pages_show_list")
    print("   ‚úÖ business_management")
    print("5. Click 'Generate Access Token'")
    print("6. Copy token v√† c·∫≠p nh·∫≠t v√†o .env")
    
    print("\nüéØ GI·∫¢I PH√ÅP 2: Facebook Business Manager")
    print("1. V√†o: https://business.facebook.com/")
    print("2. Ch·ªçn Business Manager")
    print("3. Settings ‚Üí System Users")
    print("4. T·∫°o System User m·ªõi:")
    print("   - Name: 'Ads API User'")
    print("   - Role: 'Admin'")
    print("5. C·∫•p quy·ªÅn:")
    print("   ‚úÖ Ads Management")
    print("   ‚úÖ Pages")
    print("   ‚úÖ Business Management")
    print("6. Generate Access Token")
    print("7. Copy token v√† c·∫≠p nh·∫≠t v√†o .env")
    
    print("\nüéØ GI·∫¢I PH√ÅP 3: S·ª≠ d·ª•ng App Access Token")
    print("1. V√†o: https://developers.facebook.com/apps/")
    print("2. Ch·ªçn app c·ªßa b·∫°n")
    print("3. Settings ‚Üí Basic")
    print("4. Copy App ID v√† App Secret")
    print("5. T·∫°o App Access Token:")
    print("   https://graph.facebook.com/oauth/access_token?")
    print("   client_id=YOUR_APP_ID&")
    print("   client_secret=YOUR_APP_SECRET&")
    print("   grant_type=client_credentials")
    
    print("\n‚ö†Ô∏è  L∆ØU √ù QUAN TR·ªåNG:")
    print("- Page Access Token ‚â† User Access Token")
    print("- Ads API c·∫ßn User Token ho·∫∑c System User Token")
    print("- App Access Token c√≥ th·ªÉ h·∫°n ch·∫ø quy·ªÅn")
    print("- Token c√≥ th·ªÉ h·∫øt h·∫°n, c·∫ßn refresh")

def main():
    print("üîç DEBUG TOKEN CHI TI·∫æT")
    print("="*50)
    
    debug_token_detailed()
    print_solution()

if __name__ == "__main__":
    main()
